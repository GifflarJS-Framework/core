import { createContractManager } from "gifflar-library";
import { IWeb3 } from "gifflar-library/bin/modules/deployer/types/IWeb3";
import { IContractDeployDTO } from "gifflar-library/bin/modules/managing/gifflarContract/types/IContractDeployDTO";
import { IGifflarContractManager } from "gifflar-library/bin/modules/managing/gifflarManager/types/IGifflarContractManager";
import { IGifflarContract } from "gifflar-library/bin/modules/managing/gifflarContract/types/IGifflarContract";
import { IContractJson } from "gifflar-library/bin/modules/models/toplevels/contract/types/IContractJson";
import { Contract } from "web3-eth-contract";

class ContractService {
  // Creating contract manager
  private myContractManager: IGifflarContractManager = createContractManager();

  constructor(web3?: IWeb3, accountPrivateKey?: string) {
    // Setting web3
    if (web3) {
      this.myContractManager.setWeb3(web3);
    }

    // Saving account to memory
    if (accountPrivateKey) {
      const account = web3.eth.accounts.privateKeyToAccount(accountPrivateKey);
      web3.eth.accounts.wallet.add(account);
    }
  }

  createModel(contractName: string): any {
    // Creating new contract
    const myContract: IGifflarContract =
      this.myContractManager.newContract(contractName);

    // Creating a contract variable
    myContract.createVariable("string", "message", "public");

    // Creating a contract constructor function
    myContract
      .createConstructor("public")
      .setInput("string", "_message")
      .setAssignment("message", "_message");

    return myContract.toJson();
  }

  write(json: Array<IContractJson>): string {
    return this.myContractManager.write(json);
  }

  compile(contractName: string, callback: (errors: any) => void): any {
    return this.myContractManager.compile(contractName, callback);
  }

  deploy(contractName: string, inputs: IContractDeployDTO): Promise<Contract> {
    return this.myContractManager.deploy(contractName, inputs);
  }
}

export default ContractService;
